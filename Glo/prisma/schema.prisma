generator client {
  provider = "prisma-client-js"
  // output   = "@prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique @db.VarChar(100)
  password       String?        @db.VarChar(100)
  name           String?
  emailVerified  DateTime?
  image          String?
  ipAddress      String?        @db.VarChar(100)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?      @map(name: "deleted_at")
  role           Role           @default(USER)
  refreshToken   String?        @db.Text
  twoFactorToken String?        @db.Text
  accounts       Account[]
  conversations  Conversation[]
  messages       Message[]
  Prompt         Prompt[]
  userPrompts    UserPrompt[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String    @db.VarChar(50)
  providerId         String    @db.VarChar(50)
  providerAccountId  String    @db.VarChar(50)
  refreshToken       String?   @db.Text
  accessToken        String?   @db.Text
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model UserPrompt {
  id            Int            @id @default(autoincrement())
  category      String         @db.VarChar(255)
  content       String         @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?      @map(name: "deleted_at")
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  conversations Conversation[]
}

model Conversation {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  deletedAt    DateTime?   @map(name: "deleted_at")
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  promptId     Int?
  prompt       Prompt?     @relation(fields: [promptId], references: [id])
  userPromptId Int?
  userPrompt   UserPrompt? @relation(fields: [userPromptId], references: [id])
  messages     Message[]
}

model Message {
  id              Int          @id @default(autoincrement())
  content         String       @db.Text
  createdAt       DateTime     @default(now())
  deletedAt       DateTime?    @map(name: "deleted_at")
  userId          String?
  user            User?        @relation(fields: [userId], references: [id])
  conversationId  Int
  conversation    Conversation @relation(fields: [conversationId], references: [id])
}

model Prompt {
  id            Int            @id @default(autoincrement())
  isDefault     Boolean        @default(false)
  content       String         @db.Text
  createdAt     DateTime       @default(now())
  deletedAt     DateTime?      @map(name: "deleted_at")
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  conversations Conversation[]
}
